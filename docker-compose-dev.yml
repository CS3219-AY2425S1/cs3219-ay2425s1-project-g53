services:
  fastapi:
    build:
      context: ./questions-service
      dockerfile: Dockerfile
    ports:
    - "8069:8080" # No need for this in production if docker compose is used, {SERVICE_NAME} will point to the correct ip
    depends_on:
      postgres:
        condition: service_started
        restart: true
    environment:
      # Set DB_URL to connect FastAPI to the PostgreSQL container
      - DB_URL=postgresql://admin:admin@postgres:5432/pp-crud
    working_dir: /questions-service  # Set the working directory for FastAPI

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    # ports:
      # - "3001:3001" # For debugging, remember to delete in production
    
  nextjs:
    image: node:latest
    volumes:
      - ./peerprep:/app
    working_dir: /app
    command: bash -c "npm install -g pnpm && 
        pnpm install &&
        pnpm run dev
      "
    ports:
      - "3005:3000"
    environment:
      - QUESTION_API_URL=http://fastapi:8080
      - USER_API_URL=http://user-service:3001
      - MATCH_WS_URL=ws://localhost:8086
      - COLLAB_WS_URL=ws://localhost:3000
      - COLLAB_API_URL=http://collab-service:3000
      - HISTORY_API_URL=http://history-service:8088
      - EXECUTION_API_URL=http://code-execution-service:4000

  matching-service:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    ports:
      - "8086:8080"

  code-execution-service:
    build:
      context: ./code-execution-service
      dockerfile: Dockerfile
    networks:
      - default

  history-service:
    build:
      context: ./history-service
      dockerfile: Dockerfile
    ports:
      - "8090:8088"

  collab-service:
    build:
      context: ./collab-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: pp-crud
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:
      # - "5433:5432" # No need for this


volumes:
  postgres_data:
